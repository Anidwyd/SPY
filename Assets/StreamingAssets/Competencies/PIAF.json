{
	"list": [
		{
			"key": "C1",
			"parentKey": "",
			"name": "C1 Définir des abstractions / généraliser",
			"description": "",
			"constraints": [],
			"rule": ""
		},
		{
			"key": "C1.1",
			"parentKey": "C1",
			"name": "C1.1 Nommer des objets et séquence d'actions",
			"description": "Être capable de donner des noms à des objets, des actions et des séquences d'actions.",
			"constraints": [
				{
					"label": "ScriptEditable",
					"tag": "script",
					"parameters": [
						{
							"attribute": "editMode",
							"constraint": "=",
							"value": "2"
						}
					]
				}
			],
			"rule": "ScriptEditable > 0"
		},
		{
			"key": "C1.2",
			"parentKey": "C1",
			"name": "C1.2 Différencier objet et action, et actions atomiques et non-atomiques",
			"description": "Être capable de dire si quelque chose (image, expression, phrase) fait référence à un objet, à une action, ou bien à une séquence d'actions.",
			"constraints": [
				{
					"label": "ActionInLib",
					"tag": "blockLimit",
					"parameters": [
						{
							"attribute": "blockType",
							"constraint": "include",
							"value": "Forward|TurnLeft|TurnRight|Wait|Activate|TurnBack"
						},
						{
							"attribute": "limit",
							"constraint": ">",
							"value": "0"
						}
					]
				},
				{
					"label": "ActionInScript",
					"tag": "action",
					"parameters": [
						{
							"attribute": "type",
							"constraint": "include",
							"value": "Forward|TurnLeft|TurnRight|Wait|Activate|TurnBack"
						}
					]
				},
				{
					"label": "TurnLeftInLib_x1",
					"tag": "blockLimit",
					"parameters": [
						{
							"attribute": "blockType",
							"constraint": "=",
							"value": "TurnLeft"
						},
						{
							"attribute": "limit",
							"constraint": ">=",
							"value": "1"
						}
					]
				},
				{
					"label": "TurnRightInLib_x1",
					"tag": "blockLimit",
					"parameters": [
						{
							"attribute": "blockType",
							"constraint": "=",
							"value": "TurnRight"
						},
						{
							"attribute": "limit",
							"constraint": ">=",
							"value": "1"
						}
					]
				},
				{
					"label": "TurnLeftInLib_x2",
					"tag": "blockLimit",
					"parameters": [
						{
							"attribute": "blockType",
							"constraint": "=",
							"value": "TurnLeft"
						},
						{
							"attribute": "limit",
							"constraint": ">=",
							"value": "2"
						}
					]
				},
				{
					"label": "TurnRightInLib_x2",
					"tag": "blockLimit",
					"parameters": [
						{
							"attribute": "blockType",
							"constraint": "=",
							"value": "TurnRight"
						},
						{
							"attribute": "limit",
							"constraint": ">=",
							"value": "2"
						}
					]
				},
				{
					"label": "TurnLeftInScript",
					"tag": "action",
					"parameters": [
						{
							"attribute": "type",
							"constraint": "=",
							"value": "TurnLeft"
						}
					]
				},
				{
					"label": "TurnRightInScript",
					"tag": "action",
					"parameters": [
						{
							"attribute": "type",
							"constraint": "=",
							"value": "TurnRight"
						}
					]
				},
				{
					"label": "TurnBackInLib",
					"tag": "blockLimit",
					"parameters": [
						{
							"attribute": "blockType",
							"constraint": "=",
							"value": "TurnBack"
						},
						{
							"attribute": "limit",
							"constraint": ">=",
							"value": "1"
						}
					]
				},
				{
					"label": "TurnBackInScript",
					"tag": "action",
					"parameters": [
						{
							"attribute": "type",
							"constraint": "=",
							"value": "TurnBack"
						}
					]
				},
				{
					"label": "CaptorInLib",
					"tag": "blockLimit",
					"parameters": [
						{
							"attribute": "blockType",
							"constraint": "include",
							"value": "Wall|Enemy|RedArea|FieldGate|Terminal|Exit"
						},
						{
							"attribute": "limit",
							"constraint": ">",
							"value": "0"
						}
					]
				},
				{
					"label": "CaptorInScript",
					"tag": "action",
					"parameters": [
						{
							"attribute": "type",
							"constraint": "include",
							"value": "Wall|Enemy|RedArea|FieldGate|Terminal|Exit"
						}
					]
				}
			],
			"rule": "((TurnBackInLib + TurnBackInScript) >= 1 and (TurnLeftInLib_x2 >= 1 or (TurnLeftInLib_x1 + TurnLeftInScript) >= 2 or TurnRightInLib_x2 >= 1 or (TurnRightInLib_x1 + TurnRightInScript) >= 2 )) or ((ActionInLib >= 1 or ActionInScript >= 1) and (CaptorInLib >= 1 or CaptorInScript >= 1))"
		},
		{
			"key": "C1.3",
			"parentKey": "C1",
			"name": "C1.3 Identifier les paramètres d'entrée d'une séquence d'actions",
			"description": "Être capable de dire ce qui est requis (objet ou séquence d'actions) pour effectuer une séquence d'actions.",
			"constraints": [],
			"rule": ""
		},
		{
			"key": "C1.4",
			"parentKey": "C1",
			"name": "C1.4 Décrire le résultat d'une séquence d'actions",
			"description": "Après avoir exécuté une séquence d'actions (qu'il s'agisse d'une séquence informelle, d'un algorithme, ou d'un programme), être capable de décrire cette séquence. L'apprenant doit décrire la situation finale (quels objets ont éventuellement été modifiés / créés / supprimés, ou quelle solution à un problème a été trouvée).",
			"constraints": [],
			"rule": ""
		},
		{
			"key": "C1.5",
			"parentKey": "C1",
			"name": "C1.5 Prédire le résultat d'une séquence d'actions",
			"description": "Être capable de dire, à partir d'une séquence d'actions, ce qui se passera si elle est exécutée. Contrairement à la compétence 1.4, cette compétence consiste à fournir une prédiction sans exécuter réellement la séquence d'actions.",
			"constraints": [
				{
					"label": "EnemyWithScriptAndRange",
					"tag": "enemy",
					"parameters": [
						{
							"attribute": "associatedScriptName",
							"constraint": "sameValue",
							"tag2": "script",
							"attribute2": "name"
						},
						{
							"attribute": "range",
							"constraint": ">=",
							"value": "1"
						}
					]
				},
				{
					"label": "EnemyWithScriptAndSelf",
					"tag": "enemy",
					"parameters": [
						{
							"attribute": "associatedScriptName",
							"constraint": "sameValue",
							"tag2": "script",
							"attribute2": "name"
						},
						{
							"attribute": "selfRange",
							"constraint": "=",
							"value": "True"
						}
					]
				},
				{
					"label": "ScriptWithContent",
					"tag": "script",
					"parameters": [
						{
							"attribute": "name",
							"constraint": "sameValue",
							"tag2": "enemy",
							"attribute2": "associatedScriptName"
						},
						{
							"constraint": "hasChild"
						}
					]
				}
			],
			"rule": "(EnemyWithScriptAndRange = ScriptWithContent or EnemyWithScriptAndSelf = ScriptWithContent) and ScriptWithContent <> 0"
		},
		{
			"key": "C1.6",
			"parentKey": "C1",
			"name": "C1.6 Utiliser des objets dont la valeur peut changer",
			"description": "Être capable de manipuler des valeurs qui peuvent varier en fonction du contexte, en utilisant des abstractions nommées (appelées également des identificateurs ou encore identifiants).",
			"constraints": [
				{
					"label": "CaptorInLib",
					"tag": "blockLimit",
					"parameters": [
						{
							"attribute": "blockType",
							"constraint": "include",
							"value": "Wall|Enemy|RedArea|FieldGate|Terminal|Exit"
						},
						{
							"attribute": "limit",
							"constraint": ">",
							"value": "0"
						}
					]
				},
				{
					"label": "CaptorInScript",
					"tag": "action",
					"parameters": [
						{
							"attribute": "type",
							"constraint": "include",
							"value": "Wall|Enemy|RedArea|FieldGate|Terminal|Exit"
						}
					]
				},
				{
					"label": "ControlInLib",
					"tag": "blockLimit",
					"parameters": [
						{
							"attribute": "blockType",
							"constraint": "include",
							"value": "While|If|IfElse"
						},
						{
							"attribute": "limit",
							"constraint": ">",
							"value": "0"
						}
					]
				},
				{
					"label": "ControlInScript",
					"tag": "action",
					"parameters": [
						{
							"attribute": "type",
							"constraint": "include",
							"value": "while|if|ifElse"
						}
					]
				},
				{
					"label": "ActionInLib",
					"tag": "blockLimit",
					"parameters": [
						{
							"attribute": "blockType",
							"constraint": "include",
							"value": "Forward|TurnLeft|TurnRight|Wait|Activate|TurnBack"
						},
						{
							"attribute": "limit",
							"constraint": ">",
							"value": "0"
						}
					]
				},
				{
					"label": "ActionInScript",
					"tag": "action",
					"parameters": [
						{
							"attribute": "type",
							"constraint": "include",
							"value": "Forward|TurnLeft|TurnRight|Wait|Activate|TurnBack"
						}
					]
				},
				{
					"label": "ActivateInLib",
					"tag": "blockLimit",
					"parameters": [
						{
							"attribute": "blockType",
							"constraint": "=",
							"value": "Activate"
						},
						{
							"attribute": "limit",
							"constraint": ">=",
							"value": "1"
						}
					]
				},
				{
					"label": "ActivateInScript",
					"tag": "action",
					"parameters": [
						{
							"attribute": "type",
							"constraint": "=",
							"value": "Activate"
						}
					]
				},
				{
					"label": "DoorWithSlotConnected",
					"tag": "door",
					"parameters": [
						{
							"attribute": "slotId",
							"constraint": "sameValue",
							"tag2": "slot",
							"attribute2": "slotId"
						}
					]
				}
				
			],
			"rule": "((ActionInLib + ActionInScript) >= 1 and (CaptorInLib + CaptorInScript) >= 1 and (ControlInLib + ControlInScript) >= 1) or DoorWithSlotConnected >= 1"
		},
		{
			"key": "C1.7",
			"parentKey": "C1",
			"name": "C1.7 Reconnaître, parmi des objets et séquences d’actions connus, lesquels peuvent être utilisés pour atteindre un nouvel objectif",
			"description": "Étant donné un nouveau problème (c'est-à-dire que la solution est a priori inconnue), être capable de réaliser qu'il est similaire à un problème connu dont il est possible de réutiliser tout ou une partie de la solution pour résoudre ce nouveau problème.",
			"constraints": [
				{
					"label": "DragDropDisabled",
					"tag": "dragdropDisabled",
					"parameters": []
				},
				{
					"label": "ScriptEditable",
					"tag": "script",
					"parameters": [
						{
							"attribute": "editMode",
							"constraint": "=",
							"value": "2"
						}
					]
				},
				{
					"label": "AllScript",
					"tag": "script",
					"parameters": []
				},
				{
					"label": "CorrectScript",
					"tag": "script",
					"parameters": [
						{
							"attribute": "type",
							"constraint": "=",
							"value": "0"
						}
					]
				}
			],
			"rule": "CorrectScript >= 1 and DragDropDisabled >= 1 and ScriptEditable = AllScript"
		},
		{
			"key": "C2",
			"parentKey": "",
			"name": "C2 Composer / Décomposer une séquence d'actions",
			"description": "",
			"constraints": [],
			"rule": ""
		},
		{
			"key": "C2.1",
			"parentKey": "C2",
			"name": "C2.1 Ordonner une séquence d'actions pour atteindre un objectif",
			"description": "Étant donné une liste non ordonnée d'actions et un but, être capable de combiner ces actions dans un ordre valide pour construire une séquence qui permet d'atteindre ce but.",
			"constraints": [
				{
					"label": "AvailableActionInLib",
					"tag": "blockLimit",
					"parameters": [
						{
							"attribute": "blockType",
							"constraint": "include",
							"value": "Forward|TurnLeft|TurnRight|Wait|Activate|TurnBack"
						},
						{
							"attribute": "limit",
							"constraint": ">",
							"value": "0"
						}
					]
				},
				{
					"label": "ActionInScript",
					"tag": "action",
					"parameters": [
						{
							"attribute": "type",
							"constraint": "include",
							"value": "Forward|TurnLeft|TurnRight|Wait|Activate|TurnBack"
						}
					]
				},
				{
					"label": "UnlimitedActionInLib",
					"tag": "blockLimit",
					"parameters": [
						{
							"attribute": "limit",
							"constraint": "=",
							"value": "-1"
						}
					]
				},
				{
					"label": "DragDropDisabled",
					"tag": "dragdropDisabled",
					"parameters": []
				}
			],
			"rule": "UnlimitedActionInLib = 0 and DragDropDisabled = 0 and (AvailableActionInLib >= 1 or ActionInScript >= 1)"
		},
		{
			"key": "C2.2",
			"parentKey": "C2",
			"name": "C2.2 Compléter une séquence d'actions pour atteindre un objectif simple",
			"description": "Étant donné uns séquence d'actions limitée et un objectif simple (c'est-à-dire ne s'appuyant pas sur des concepts avancés comme les conditions et les boucles), être capable d'ajouter les actions manquantes à la séquence pour atteindre l'objectif.",
			"constraints": [
				{
					"label": "AllScript",
					"tag": "script",
					"parameters": []
				},
				{
					"label": "BuggedScript",
					"tag": "script",
					"parameters": [
						{
							"attribute": "type",
							"constraint": "=",
							"value": "2"
						}
					]
				},
				{
					"label": "AvailableActionInLib",
					"tag": "blockLimit",
					"parameters": [
						{
							"attribute": "blockType",
							"constraint": "include",
							"value": "Forward|TurnLeft|TurnRight|Wait|Activate|TurnBack"
						},
						{
							"attribute": "limit",
							"constraint": ">",
							"value": "0"
						}
					]
				},
				{
					"label": "ActionInScript",
					"tag": "action",
					"parameters": [
						{
							"attribute": "type",
							"constraint": "include",
							"value": "Forward|TurnLeft|TurnRight|Wait|Activate|TurnBack"
						}
					]
				},
				{
					"label": "ControlInLib",
					"tag": "blockLimit",
					"parameters": [
						{
							"attribute": "blockType",
							"constraint": "include",
							"value": "For|Forever|While|If|IfElse"
						},
						{
							"attribute": "limit",
							"constraint": ">",
							"value": "0"
						}
					]
				},
				{
					"label": "IfInScript",
					"tag": "if",
					"parameters": []
				},
				{
					"label": "IfElseInScript",
					"tag": "ifElse",
					"parameters": []
				},
				{
					"label": "ForInScript",
					"tag": "for",
					"parameters": []
				},
				{
					"label": "WhileInScript",
					"tag": "while",
					"parameters": []
				},
				{
					"label": "ForeverInScript",
					"tag": "forever",
					"parameters": []
				}
			],
			"rule": "BuggedScript = AllScript and (AvailableActionInLib >=1 or ActionInScript >= 1) and ControlInLib = 0 and IfInScript = 0 and IfElseInScript = 0 and ForInScript = 0 and WhileInScript = 0 and ForeverInScript = 0"
		},
		{
			"key": "C2.3",
			"parentKey": "C2",
			"name": "C2.3 Créer une séquence d'actions pour atteindre un objectif simple",
			"description": "Étant donné un objectif simple (c'est-à-dire ne s'appuyant pas sur des concepts avancés comme les conditions et les boucles), être capable d'identifier toutes les actions nécessaires et les mettre dans le bon ordre.",
			"constraints": [
				{
					"label": "AvailableActionInLib",
					"tag": "blockLimit",
					"parameters": [
						{
							"attribute": "blockType",
							"constraint": "include",
							"value": "Forward|TurnLeft|TurnRight|Wait|Activate|TurnBack"
						},
						{
							"attribute": "limit",
							"constraint": ">",
							"value": "0"
						}
					]
				},
				{
					"label": "ActionInScript",
					"tag": "action",
					"parameters": [
						{
							"attribute": "type",
							"constraint": "include",
							"value": "Forward|TurnLeft|TurnRight|Wait|Activate|TurnBack"
						}
					]
				},
				{
					"label": "DragDropDisabled",
					"tag": "dragdropDisabled",
					"parameters": []
				},
				{
					"label": "ControlInLib",
					"tag": "blockLimit",
					"parameters": [
						{
							"attribute": "blockType",
							"constraint": "include",
							"value": "For|Forever|While|If|IfElse"
						},
						{
							"attribute": "limit",
							"constraint": ">",
							"value": "0"
						}
					]
				},
				{
					"label": "IfInScript",
					"tag": "if",
					"parameters": []
				},
				{
					"label": "IfElseInScript",
					"tag": "ifElse",
					"parameters": []
				},
				{
					"label": "ForInScript",
					"tag": "for",
					"parameters": []
				},
				{
					"label": "WhileInScript",
					"tag": "while",
					"parameters": []
				},
				{
					"label": "ForeverInScript",
					"tag": "forever",
					"parameters": []
				}
			],
			"rule": "DragDropDisabled = 0 and (AvailableActionInLib >= 1 or ActionInScript >= 1) and ControlInLib = 0 and IfInScript = 0 and IfElseInScript = 0 and ForInScript = 0 and WhileInScript = 0 and ForeverInScript = 0"
		},
		{
			"key": "C2.4",
			"parentKey": "C2",
			"name": "C2.4 Créer une séquence d'actions pour atteindre un objectif complexe",
			"description": "Étant donné un objectif complexe (c'est-à-dire un objectif exigeant des conditions simples ou complexes ou des boucles), être capable de définir une séquence d'actions permettant de réaliser cet objectif (i.e., identifier et combiner correctement les actions nécessaires).",
			"constraints": [
				{
					"label": "AvailableActionInLib",
					"tag": "blockLimit",
					"parameters": [
						{
							"attribute": "blockType",
							"constraint": "include",
							"value": "Forward|TurnLeft|TurnRight|Wait|Activate|TurnBack"
						},
						{
							"attribute": "limit",
							"constraint": ">",
							"value": "0"
						}
					]
				},
				{
					"label": "ActionInScript",
					"tag": "action",
					"parameters": [
						{
							"attribute": "type",
							"constraint": "include",
							"value": "Forward|TurnLeft|TurnRight|Wait|Activate|TurnBack"
						}
					]
				},
				{
					"label": "DragDropDisabled",
					"tag": "dragdropDisabled",
					"parameters": []
				},
				{
					"label": "ControlInLib",
					"tag": "blockLimit",
					"parameters": [
						{
							"attribute": "blockType",
							"constraint": "include",
							"value": "For|Forever|While|If|IfElse"
						},
						{
							"attribute": "limit",
							"constraint": ">",
							"value": "0"
						}
					]
				},
				{
					"label": "IfInScript",
					"tag": "if",
					"parameters": []
				},
				{
					"label": "IfElseInScript",
					"tag": "ifElse",
					"parameters": []
				},
				{
					"label": "ForInScript",
					"tag": "for",
					"parameters": []
				},
				{
					"label": "WhileInScript",
					"tag": "while",
					"parameters": []
				},
				{
					"label": "ForeverInScript",
					"tag": "forever",
					"parameters": []
				}
			],
			"rule": "DragDropDisabled = 0 and (AvailableActionInLib >= 1 or ActionInScript >= 1) and (ControlInLib >= 1 or IfInScript >= 1 or IfElseInScript >= 1 or ForInScript >= 1 or WhileInScript >= 1 or ForeverInScript >= 1)"
		},
		{
			"key": "C2.5",
			"parentKey": "C2",
			"name": "C2.5 Combiner des séquences d'actions pour atteindre un objectif",
			"description": "Étant donné des séquences d'actions permettant de réaliser certains objectifs, être capable de dire se celle-ci sont pertinentes pour un nouvel objectif, et si oui de les combiner (ordonner) pour réaliser celui-ci.",
			"constraints": [],
			"rule": ""
		},
		{
			"key": "C2.6",
			"parentKey": "C2",
			"name": "C2.6 Décomposer des objectifs en sous-objectifs plus simples",
			"description": "Être capable de diviser un objectif complexe en plusieurs sous-objectifs qui peuvent être atteints plus facilement. Ceux-ci peuvent alors être réalisés par différentes personnes.",
			"constraints": [
				{
					"label": "ExecutionLimit",
					"tag": "executionLimit",
					"parameters": [
						{
							"attribute": "amount",
							"constraint": "=",
							"value": "1"
						}
					]
				}
			],
			"rule": "ExecutionLimit = 0"
		},
		{
			"key": "C3",
			"parentKey": "",
			"name": "C3 Contrôler une séquence d'actions",
			"description": "",
			"constraints": [],
			"rule": ""
		},
		{
			"key": "C3.1",
			"parentKey": "C3",
			"name": "C3.1 Répéter une séquence d'actions un nombre donné de fois",
			"description": "Être capable d'utiliser de manière appropriée les répétitions d'actions (ou de séquences d'actions) un certain nombre de fois, afin d'atteindre un objectif.",
			"constraints": [
				{
					"label": "DragDropDisabled",
					"tag": "dragdropDisabled",
					"parameters": []
				},
				{
					"label": "ForInLib",
					"tag": "blockLimit",
					"parameters": [
						{
							"attribute": "blockType",
							"constraint": "=",
							"value": "For"
						},
						{
							"attribute": "limit",
							"constraint": ">",
							"value": "0"
						}
					]
				},
				{
					"label": "ForInScript",
					"tag": "for",
					"parameters": []
				}
			],
			"rule": "DragDropDisabled = 0 and (ForInLib >= 1 or ForInScript >= 1)"
		},
		{
			"key": "C3.2",
			"parentKey": "C3",
			"name": "C3.2 Répéter une séquence d'actions jusqu'à ce qu'un objectif soit atteint",
			"description": "Être capable de contrôler les répétitions d'actions (ou de séquences d'actions) jusqu'à ce qu'une condition soit remplie, afin d'atteindre un objectif.",
			"constraints": [
				{
					"label": "DragDropDisabled",
					"tag": "dragdropDisabled",
					"parameters": []
				},
				{
					"label": "WhileInLib",
					"tag": "blockLimit",
					"parameters": [
						{
							"attribute": "blockType",
							"constraint": "=",
							"value": "While"
						},
						{
							"attribute": "limit",
							"constraint": ">",
							"value": "0"
						}
					]
				},
				{
					"label": "WhileInScript",
					"tag": "while",
					"parameters": []
				},
				{
					"label": "CaptorInLib",
					"tag": "blockLimit",
					"parameters": [
						{
							"attribute": "blockType",
							"constraint": "include",
							"value": "Wall|Enemy|RedArea|FieldGate|Terminal|Exit"
						},
						{
							"attribute": "limit",
							"constraint": ">",
							"value": "0"
						}
					]
				},
				{
					"label": "CaptorInScript",
					"tag": "action",
					"parameters": [
						{
							"attribute": "type",
							"constraint": "include",
							"value": "Wall|Enemy|RedArea|FieldGate|Terminal|Exit"
						}
					]
				},
				{
					"label": "OperatorInLib",
					"tag": "blockLimit",
					"parameters": [
						{
							"attribute": "blockType",
							"constraint": "include",
							"value": "AndOperator|OrOperator|NotOperator"
						},
						{
							"attribute": "limit",
							"constraint": ">",
							"value": "0"
						}
					]
				},
				{
					"label": "AndInScript",
					"tag": "and",
					"parameters": []
				},
				{
					"label": "OrInScript",
					"tag": "or",
					"parameters": []
				},
				{
					"label": "NotInScript",
					"tag": "not",
					"parameters": []
				}
			],
			"rule": "DragDropDisabled = 0 and (WhileInLib >= 1 or WhileInScript >= 1) and (CaptorInLib >= 1 or CaptorInScript >= 1) and OperatorInLib = 0 and AndInScript = 0 and OrInScript = 0 and NotInScript = 0"
		},
		{
			"key": "C3.3",
			"parentKey": "C3",
			"name": "C3.3 Intégrer une condition simple dans une séquence d'actions",
			"description": "Être capable d'utiliser des conditions simples (reposant sur un critère) pour permettre (ou interdire) certaines séquences d'actions.",
			"constraints": [
				{
					"label": "DragDropDisabled",
					"tag": "dragdropDisabled",
					"parameters": []
				},
				{
					"label": "IfOrIfElseInLib",
					"tag": "blockLimit",
					"parameters": [
						{
							"attribute": "blockType",
							"constraint": "include",
							"value": "If|IfElse"
						},
						{
							"attribute": "limit",
							"constraint": ">",
							"value": "0"
						}
					]
				},
				{
					"label": "IfInScript",
					"tag": "if",
					"parameters": []
				},
				{
					"label": "IfElseInScript",
					"tag": "ifElse",
					"parameters": []
				},
				{
					"label": "CaptorInLib",
					"tag": "blockLimit",
					"parameters": [
						{
							"attribute": "blockType",
							"constraint": "include",
							"value": "Wall|Enemy|RedArea|FieldGate|Terminal|Exit"
						},
						{
							"attribute": "limit",
							"constraint": ">",
							"value": "0"
						}
					]
				},
				{
					"label": "CaptorInScript",
					"tag": "action",
					"parameters": [
						{
							"attribute": "type",
							"constraint": "include",
							"value": "Wall|Enemy|RedArea|FieldGate|Terminal|Exit"
						}
					]
				},
				{
					"label": "OperatorInLib",
					"tag": "blockLimit",
					"parameters": [
						{
							"attribute": "blockType",
							"constraint": "include",
							"value": "AndOperator|OrOperator|NotOperator"
						},
						{
							"attribute": "limit",
							"constraint": ">",
							"value": "0"
						}
					]
				},
				{
					"label": "AndInScript",
					"tag": "and",
					"parameters": []
				},
				{
					"label": "OrInScript",
					"tag": "or",
					"parameters": []
				},
				{
					"label": "NotInScript",
					"tag": "not",
					"parameters": []
				}
			],
			"rule": "DragDropDisabled = 0 and (IfOrIfElseInLib >= 1 or IfInScript >= 1 or IfElseInScript >= 1) and (CaptorInLib >= 1 or CaptorInScript >= 1) and OperatorInLib = 0 and AndInScript = 0 and OrInScript = 0 and NotInScript = 0"
		},
		{
			"key": "C3.4",
			"parentKey": "C3",
			"name": "C3.4 Intégrer une condition complexe dans une séquence d'actions",
			"description": "Être capable d'utiliser des conditions complexes (c'est-à-dire reposant sur plusieurs critères, qui sont combinés au moyen des opérateurs logiques \"et\", \"ou\", \"ne pas\") pour permettre (ou interdire) certaines séquences d'actions.",
			"constraints": [
				{
					"label": "DragDropDisabled",
					"tag": "dragdropDisabled",
					"parameters": []
				},
				{
					"label": "ControlInLib",
					"tag": "blockLimit",
					"parameters": [
						{
							"attribute": "blockType",
							"constraint": "include",
							"value": "If|IfElse|While"
						},
						{
							"attribute": "limit",
							"constraint": ">",
							"value": "0"
						}
					]
				},
				{
					"label": "IfInScript",
					"tag": "if",
					"parameters": []
				},
				{
					"label": "IfElseInScript",
					"tag": "ifElse",
					"parameters": []
				},
				{
					"label": "WhileInScript",
					"tag": "while",
					"parameters": []
				},
				{
					"label": "CaptorInLib",
					"tag": "blockLimit",
					"parameters": [
						{
							"attribute": "blockType",
							"constraint": "include",
							"value": "Wall|Enemy|RedArea|FieldGate|Terminal|Exit"
						},
						{
							"attribute": "limit",
							"constraint": ">",
							"value": "0"
						}
					]
				},
				{
					"label": "CaptorInScript",
					"tag": "action",
					"parameters": [
						{
							"attribute": "type",
							"constraint": "include",
							"value": "Wall|Enemy|RedArea|FieldGate|Terminal|Exit"
						}
					]
				},
				{
					"label": "OperatorInLib",
					"tag": "blockLimit",
					"parameters": [
						{
							"attribute": "blockType",
							"constraint": "include",
							"value": "AndOperator|OrOperator|NotOperator"
						},
						{
							"attribute": "limit",
							"constraint": ">",
							"value": "0"
						}
					]
				},
				{
					"label": "AndInScript",
					"tag": "and",
					"parameters": []
				},
				{
					"label": "OrInScript",
					"tag": "or",
					"parameters": []
				},
				{
					"label": "NotInScript",
					"tag": "not",
					"parameters": []
				}
			],
			"rule": "DragDropDisabled = 0 and (ControlInLib >= 1 or IfInScript >= 1 or IfElseInScript >= 1 or WhileInScript >= 1) and (CaptorInLib >= 1 or CaptorInScript >= 1) and (OperatorInLib >= 1 or AndInScript >= 1 or OrInScript >= 1 or NotInScript >= 1)"
		},
		{
			"key": "C4",
			"parentKey": "",
			"name": "C4 Évaluer des objets ou des séquences d'actions",
			"description": "",
			"constraints": [],
			"rule": ""
		},
		{
			"key": "C4.1",
			"parentKey": "C4",
			"name": "C4.1 Comparer deux objets selon un critère donné",
			"description": "Étant donné deux objets et un critère de comparaison, être capable de comparer ces objets par rapport au critère.",
			"constraints": [],
			"rule": ""
		},
		{
			"key": "C4.2",
			"parentKey": "C4",
			"name": "C4.2 Comparer deux séquences d'actions selon un critère donné",
			"description": "Être capable de comparer des séquences d'actions selon divers critères : en termes de lisibilité, de nombre de lignes, de temps d'exécution ou autre.",
			"constraints": [
				{
					"label": "DragDropDisabled",
					"tag": "dragdropDisabled",
					"parameters": []
				},
				{
					"label": "AllScript",
					"tag": "script",
					"parameters": []
				},
				{
					"label": "ScriptEditable",
					"tag": "script",
					"parameters": [
						{
							"attribute": "editMode",
							"constraint": "=",
							"value": "2"
						}
					]
				},
				{
					"label": "NonOptimalScript",
					"tag": "script",
					"parameters": [
						{
							"attribute": "type",
							"constraint": "=",
							"value": "1"
						}
					]
				},
				{
					"label": "CorrectScript",
					"tag": "script",
					"parameters": [
						{
							"attribute": "type",
							"constraint": "=",
							"value": "0"
						}
					]
				}
			],
			"rule": "DragDropDisabled >= 1 and AllScript = ScriptEditable and (CorrectScript + NonOptimalScript) = AllScript"
		},
		{
			"key": "C4.3",
			"parentKey": "C4",
			"name": "C4.3 Améliorer une séquence d'actions par rapport à un critère donné",
			"description": "Être capable de réfléchir à la possibilité d'améliorer une séquence d'actions par rapport à un critère et modifier cette séquence d'actions en conséquence.",
			"constraints": [
				{
					"label": "DragDropDisabled",
					"tag": "dragdropDisabled",
					"parameters": []
				},
				{
					"label": "AllScript",
					"tag": "script",
					"parameters": []
				},
				{
					"label": "NonOptimalScript",
					"tag": "script",
					"parameters": [
						{
							"attribute": "type",
							"constraint": "=",
							"value": "1"
						}
					]
				},
				{
					"label": "ActionInLib",
					"tag": "blockLimit",
					"parameters": [
						{
							"attribute": "blockType",
							"constraint": "include",
							"value": "Forward|TurnLeft|TurnRight|Wait|Activate|TurnBack"
						},
						{
							"attribute": "limit",
							"constraint": ">",
							"value": "0"
						}
					]
				}
			],
			"rule": "DragDropDisabled = 0 and AllScript = NonOptimalScript and ActionInLib >= 1"
		},
		{
			"key": "C5",
			"parentKey": "",
			"name": "C5 Manipuler des représentations formelles",
			"description": "",
			"constraints": [],
			"rule": ""
		},
		{
			"key": "C5.1",
			"parentKey": "C5",
			"name": "C5.1 Représenter des objets ou séquences d'actions au moyen d'une représentation formelle",
			"description": "Être capable de représenter un objet ou une action en utilisant un mode de représentation défini avec précision (non ambigu).",
			"constraints": [],
			"rule": ""
		},
		{
			"key": "C5.2",
			"parentKey": "C5",
			"name": "C5.2 Traduire des objets ou séquences d'actions entre représentations formelles",
			"description": "Être capable d'utiliser un autre langage / code formel pour représenter des objets ou séquences d'actions formellement définis.",
			"constraints": [],
			"rule": ""
		},
		{
			"key": "C6",
			"parentKey": "",
			"name": "C6 Construire une séquence d'actions de manière itérative",
			"description": "",
			"constraints": [],
			"rule": ""
		},
		{
			"key": "C6.1",
			"parentKey": "C6",
			"name": "C6.1 Vérifier si une séquence d'actions atteint un objectif donné",
			"description": "Être capable de vérifier si une séquence d'actions donnée produit ou non le résultat escompté.",
			"constraints": [
				{
					"label": "containsRobot",
					"tag": "player",
					"parameters": []
				}
			],
			"rule": "containsRobot >= 1"
		},
		{
			"key": "C6.2",
			"parentKey": "C6",
			"name": "C6.2 Repérer des erreurs dans une séquence d'actions",
			"description": "En cas de séquence d'actions erronée, être capable de localiser la ou les erreurs.",
			"constraints": [],
			"rule": ""
		},
		{
			"key": "C6.3",
			"parentKey": "C6",
			"name": "C6.3 Corriger une séquence d'actions pour atteindre un objectif donné",
			"description": "A partir d'une séquence d'actions donnée, qui ne permet pas d'atteindre un but donné, être capable de modifier cette séquence d'actions pour atteindre le but.",
			"constraints": [
				{
					"label": "DragDropDisabled",
					"tag": "dragdropDisabled",
					"parameters": []
				},
				{
					"label": "AllScript",
					"tag": "script",
					"parameters": []
				},
				{
					"label": "BuggedScript",
					"tag": "script",
					"parameters": [
						{
							"attribute": "type",
							"constraint": "=",
							"value": "2"
						}
					]
				},
				{
					"label": "ActionInLib",
					"tag": "blockLimit",
					"parameters": [
						{
							"attribute": "blockType",
							"constraint": "include",
							"value": "Forward|TurnLeft|TurnRight|Wait|Activate|TurnBack"
						},
						{
							"attribute": "limit",
							"constraint": ">",
							"value": "0"
						}
					]
				}
			],
			"rule": "DragDropDisabled = 0 and AllScript = BuggedScript and ActionInLib >= 1"
		},
		{
			"key": "C6.4",
			"parentKey": "C6",
			"name": "C6.4 Étendre ou modifier une séquence d'actions pour atteindre un nouvel objectif",
			"description": "A partir d'une séquence d'actions donnée dont le résultat est connu (la séquence est complète par rapport à un objectif précédent), pouvoir la réutiliser et l'adapter pour atteindre un autre (nouvel) objectif.",
			"constraints": [
				{
					"label": "RobotsInSameLine",
					"tag": "player",
					"parameters": [
						{
							"attribute": "associatedScriptName",
							"constraint": "sameValue",
							"tag2": "player",
							"attribute2": "associatedScriptName"
						}
					]
				},
				{
					"label": "ActionInLib",
					"tag": "blockLimit",
					"parameters": [
						{
							"attribute": "blockType",
							"constraint": "include",
							"value": "Forward|TurnLeft|TurnRight|Wait|Activate|TurnBack"
						},
						{
							"attribute": "limit",
							"constraint": ">",
							"value": "0"
						}
					]
				}
			],
			"rule": "RobotsInSameLine >= 2 and ActionInLib >= 1"
		}
	]
}